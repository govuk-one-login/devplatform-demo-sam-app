AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Demo CloudFront Distribution.
  Managed by dev-platform

Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(integration)|(staging)|(build)|(dev))

Mappings:
  EnvironmentConfiguration:
    "dev":
      CloudfrontCertificate: "arn:aws:acm:us-east-1:842766856468:certificate/ece18c99-4a54-42c2-8da6-5e0acd244f60" # we have to make this manually as it lives in us-east-1

Resources:

 #CloudfrontDistDNSRecord:
 #  Type: AWS::Route53::RecordSet
 #  Properties:
 #    Name: !Sub "cloudfront-estimate.${Environment}.platform.sandpit.account.gov.uk"
 #    Type: A
 #    HostedZoneId: !ImportValue PlatformSandpitHostedZone
 #    AliasTarget:
 #      DNSName: !GetAtt CloudfrontDistribution.DomainName
 #      HostedZoneId: 'Z2FDTNDATAQYW2' #Always this for cloudfront
 #      EvaluateTargetHealth: true

  #CloudfrontCachePolicy:
  #  Type: AWS::CloudFront::CachePolicy
  #  Properties:
  #    MinTTL: 0
  #    MaxTTL: 0
  #    Name: "NoCachePolicy"
  #    ParametersInCacheKeyAndForwardedToOrigin:
  #      CookiesConfig:
  #        CookieBehaviour: all
  #      EnableAcceptEncodingGzip: true
  #      HeadersConfig:
  #        HeadersBehaviour: whitelist
  #        Headers:
  #          - x-forwarded-for
  #          - forwarded
  #      QueryStringConfig:
  #        QueryStringBehavior: all



  CloudfrontDistribution:
    #checkov:skip=CKV_AWS_86:The repository is public for DNS failover, no Access Logs setup is required
    #checkov:skip=CKV_AWS_68:The repository is public for DNS failover, no WAF is required
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub "cloudfront-estimate.${Environment}.platform.sandpit.account.gov.uk"
        Origins:
          - DomainName:
              Fn::ImportValue:
                Fn::Sub: "DefaultApiDomainName-${Environment}"
            OriginPath:
              Fn::ImportValue:
                Fn::Sub: "DefaultApiStage-${Environment}"
            Id: RestAPIGatewayOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
              OriginSSLProtocols:
                - TLSv1.2
        Enabled: 'true'
        Comment: CloudfrontToRestAPI
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad #Managed-CachingDisabled
          TargetOriginId: RestAPIGatewayOrigin
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt FraudHeadersFunction.FunctionMetadata.FunctionARN
            #- EventType: viewer-request
            #  FunctionARN: !GetAtt RedirectToBustCacheFunction.FunctionMetadata.FunctionARN
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
          AcmCertificateArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment,  CloudfrontCertificate ]

  #RedirectToBustCacheFunction:
  #  Type: AWS::CloudFront::Function
  #  Properties:
  #    AutoPublish: true
  #    FunctionCode: |
  #      function handler(event) {
  #          var request = event.request;
  #          return request;
  #      }
  #    FunctionConfig:
  #      Comment: redirect to bust cache
  #      Runtime: cloudfront-js-1.0
  #    #FunctionMetadata:
  #    #  FunctionARN: !Sub "RedirectToBustCache-${Environment}-${AWS::StackName}"
  #    Name: "RedirectToBustCache"

  FraudHeadersFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var headers = request.headers;

          headers['fraud'] = { value: 'some_base64' }
          return request;
        }

      FunctionConfig:
        Comment: inject content type headers
        Runtime: cloudfront-js-1.0
      #FunctionMetadata:
      #  FunctionARN: !Sub "AssetsCDNHeaders-${Environment}-${AWS::StackName}"
      Name: !Sub "FraudHeaders-${Environment}-${AWS::StackName}"

Outputs:
  CloudfrontDistDomain:
    Description: Default distribution domain name
    Value: !GetAtt CloudfrontDistribution.DomainName
    Export:
      Name: !Sub "CloudfrontDistDomain-${Environment}"



