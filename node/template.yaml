AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Demo application container for deployment into AWS Fargate.
  Managed by dev-platform

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String

  CodeSigningConfigArn:
    Type: String
    Description: Asserts that lambdas are signed when deployed.
    Default: none

  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

  DeploymentStrategy:
    Description: "Predefined deployment configuration for ECS application"
    Type: String
    Default: "None"
    # Allowed values: See https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html
    AllowedValues:
      - None
      - CodeDeployDefault.ECSCanary10Percent5Minutes
      - CodeDeployDefault.ECSCanary10Percent15Minutes
      - CodeDeployDefault.ECSAllAtOnce
      - ECSCanary50Percent5Minutes

  Environment:
    Description: "The name of the environment to deploy to"
    Type: "String"
    AllowedValues:
      - build
      - staging
      - production
      - integration
      - dev

  NotificationTopicArn:
    Description: "The ARN of the SNS topic used for notifications"
    Type: "String"
    Default: "none"

  ELB4XXAlarmMetric:
    Description: >
      Metric to be monitored by ELB4XXAlarm. This enables alarm
      to monitor for 4XX errors originated from the Target Group
      OR the Application Load Balancer.
    Type: String
    Default: HTTPCode_Target_4XX_Count
    AllowedValues:
      - HTTPCode_Target_4XX_Count
      - HTTPCode_ELB_4XX_Count

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

  UseECSCanaryDeploymentStack:
    Fn::Not:
      - Fn::Equals:
        - !Ref DeploymentStrategy
        - None

  UseAlarmActions:
    Fn::Not:
      - Fn::Equals:
        - !Ref NotificationTopicArn
        - "none"

Mappings:
  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416
  EnvironmentConfiguration:
    # Requires KMSApiEnabled and SecretsManagerApiEnabled in the VPC Stack
    # See https://github.com/govuk-one-login/observability-infrastructure/blob/main/fargate/README.md
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables  # pragma: allowlist secret
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables  # pragma: allowlist secret
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables  # pragma: allowlist secret
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables  # pragma: allowlist secret
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables     # pragma: allowlist secret

Resources:
  #
  # Fargate cluster
  #

  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-FargateCluster"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml

  ContainerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FargateCluster
      LaunchType: FARGATE
      DeploymentController:
        Type: !If
          - UseECSCanaryDeploymentStack
          - CODE_DEPLOY
          - ECS
      LoadBalancers:
        - ContainerName: !Sub "${AWS::StackName}-node-server"
          ContainerPort: 8000
          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !GetAtt ContainerServiceSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdB"
      PropagateTags: SERVICE
      TaskDefinition: !If
        - UseECSCanaryDeploymentStack
        - !Ref AWS::NoValue
        - !Ref TaskDefinition
      # TaskDefinition: !Ref TaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerService"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml
    DependsOn: ApplicationLoadBalancerListener

  ContainerAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref FargateCluster
          - !GetAtt ContainerService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # ContainerAutoScalingPolicy:
  #   DependsOn: ContainerAutoScalingTarget
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: containerAutoScalingPolicy
  #     PolicyType: TargetTrackingScaling
  #     ResourceId: !Join
  #       - '/'
  #       - - "service"
  #         - !Ref FargateCluster
  #         - !GetAtt ContainerService.Name
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs
  #     TargetTrackingScalingPolicyConfiguration:
  #       CustomizedMetricSpecification:
  #         MetricName: ResponseTime
  #         Statistic: Average
  #         Namespace: FEC/NodeApp
  #       TargetValue: 500


  ContainerStepScaleOutPolicy:
    DependsOn: ContainerAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ContainerStepScaleOutPolicy
      PolicyType: StepScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref FargateCluster
          - !GetAtt ContainerService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 30
        MinAdjustmentMagnitude: 2
        StepAdjustments:
          - MetricIntervalLowerBound: 800 
            MetricIntervalUpperBound: 1000
            ScalingAdjustment: 200
          - MetricIntervalLowerBound: 1000
            MetricIntervalUpperBound: 1200
            ScalingAdjustment: 300
          - MetricIntervalLowerBound: 1200
            ScalingAdjustment: 500
  ContainerStepScaleOutAlarm:
    DependsOn: ContainerStepScaleOutPolicy
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ContainerStepScaleOutPolicy
      AlarmDescription: "ContainerStepScaleOutPolicyResponseTimeSlow"
      ComparisonOperator: "GreaterThanThreshold"
      DatapointsToAlarm: 1
      Unit: "Count"
      EvaluationPeriods: 1
      MetricName: "ResponseTime"
      Namespace: "FEC/NodeApp"
      Statistic: "Maximum"
      Period: 10
      Threshold: 800

  ContainerStepScaleInPolicy:
    DependsOn: ContainerAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ContainerStepScaleInPolicy
      PolicyType: StepScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref FargateCluster
          - !GetAtt ContainerService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 30
        MinAdjustmentMagnitude: 2
        StepAdjustments:
          - MetricIntervalUpperBound: 800
            ScalingAdjustment: -100

  ContainerStepScaleInAlarm:
    DependsOn: ContainerStepScaleInPolicy
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ContainerStepScaleInPolicy
      AlarmDescription: "ContainerStepScaleInPolicyResponseTimeSlow"
      ComparisonOperator: "LessThanThreshold"
      DatapointsToAlarm: 2
      Unit: "Count"
      EvaluationPeriods: 2
      MetricName: "ResponseTime"
      Namespace: "FEC/NodeApp"
      Statistic: "Maximum"
      Period: 10
      Threshold: 800

  ContainerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to access the Container Service
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ContainerService
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      SecurityGroupIngress:
        - Description: Allow traffic from the load balancer on port 8000
          SourceSecurityGroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerServiceSecurityGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml

  #
  # Fargate tasks
  #

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-node-server"
          Image: "CONTAINER-IMAGE-PLACEHOLDER"
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/ecs/server"
              awslogs-region: "eu-west-2"
              awslogs-create-group: "true"
              awslogs-stream-prefix: "ecs"
          HealthCheck:
            Command:  [ "CMD-SHELL", "curl --fail http://localhost:8000/healthcheck || exit 1" ]
            Interval: 5
            Retries: 3
            Timeout: 3
          Secrets:
          - Name: DT_TENANT
            ValueFrom: !Join
              - ''
              - - !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
                - ':DT_TENANT::'
          - Name: DT_TENANTTOKEN
            ValueFrom: !Join
              - ''
              - - !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
                - ':DT_TENANTTOKEN::'
          - Name: DT_CONNECTION_POINT
            ValueFrom: !Join
            - ''
            - - !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
              - ':DT_CONNECTION_POINT::'
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Family: !Sub "${AWS::StackName}-server"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskDefinition"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: CreateLogGroup
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
        - PolicyName: GetDynatraceSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:ListSecrets                                # pragma: allowlist secret
                  - secretsmanager:GetSecretValue                             # pragma: allowlist secret
                Resource:
                  - arn:aws:secretsmanager:eu-west-2:216552277552:secret:*    # pragma: allowlist secret
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - arn:aws:kms:eu-west-2:216552277552:key/*
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskExecutionRole"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: PutMetricToCloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - cloudwatch:PutMetricData
                Resource: 
                  - "*"

      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskExecutionRole"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml

  #
  # API Gateway
  #

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-node-server-endpoint"
      ProtocolType: HTTP
      Tags:
        Name: !Sub "${AWS::StackName}-ApiGateway"
        Service: ci/cd
        Source: govuk-one-login/devplatform-demo-sam-app/node/template.yaml

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref ApplicationLoadBalancerListener
      PayloadFormatVersion: 1.0

  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${ApiGatewayIntegration}"

  ApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      AutoDeploy: true
      AccessLogSettings:
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status": $context.status,"responseLatency": $context.responseLatency, "integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus", "ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent"}'
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
      Tags:
        Name: !Sub "${AWS::StackName}-ApiDefaultStage"
        Service: ci/cd
        Source: govuk-one-login/devplatform-demo-sam-app/node/template.yaml

  #
  # Load balancing
  #

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdB"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancer"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml

  ApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: 8000
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      Port: 8000
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Matcher:
        HttpCode: "200"
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerTargetGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled.
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Application Load Balancer
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ApplicationLoadBalancer
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerSecurityGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml

  ApplicationLoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      CidrIp: 10.0.0.0/16
      Description: Allow traffic from the VPC on port 80
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  ApplicationLoadBalancerSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt ContainerServiceSecurityGroup.GroupId
      Description: Allow traffic to Container Service on port 8000
      IpProtocol: tcp
      FromPort: 8000
      ToPort: 8000

  #
  # ECS Alarms
  #

  ELB5XX10PercentAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: >
        The number of HTTP 5XX server error codes that originate from the load balancer is greater than 10% of all traffic.
        This count does not include any response codes generated by the targets.
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: missing
      Metrics:
      - Id: e1
        Label: ErrorPercent
        ReturnData: true
        Expression: (m1/m2)*100
      - Id: m1
        ReturnData: false
        MetricStat:
          Metric:
            Namespace: AWS/ApplicationELB
            MetricName: HTTPCode_ELB_5XX_Count
            Dimensions:
              - Name: LoadBalancer
                Value: !Ref ApplicationLoadBalancer
          Period: 60
          Stat: Sum
      - Id: m2
        ReturnData: false
        MetricStat:
          Metric:
            Namespace: AWS/ApplicationELB
            MetricName: RequestCount
            Dimensions:
            - Name: LoadBalancer
              Value: !Ref ApplicationLoadBalancer
          Period: 60
          Stat: Sum

  ELB5XXAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: >
        The number of HTTP 5XX server error codes that originate from the load balancer.
        This count does not include any response codes generated by the targets.
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref ApplicationLoadBalancer
      Period: 60
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 2
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  ELB4XXAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: >
        The number of HTTP 4XX server error codes that originate from the load balancer.
        This count does not include any response codes generated by the targets.
      MetricName: !Ref ELB4XXAlarmMetric
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref ApplicationLoadBalancer
      Period: 60
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 2
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  #
  # Anomaly detection
  #

  ELB4XXAnomalyDetector:
    Type: AWS::CloudWatch::AnomalyDetector
    Properties:
      MetricName:  HTTPCode_ELB_4XX_Count
      Namespace: AWS/ApplicationELB
      Stat: Sum
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName

  ELB5XXAnomalyDetector:
    Type: AWS::CloudWatch::AnomalyDetector
    Properties:
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Stat: Sum
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName

  ELB4XXAnomalyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: >
        Based on anomaly detection, the number of HTTP 4XX server error codes that
        originate from the load balancer. This count does not include any response
        codes generated by the targets.
      AlarmActions: !If
        - UseAlarmActions
        - - !Ref NotificationTopicArn
        - []
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      ThresholdMetricId: ad1
      ComparisonOperator: GreaterThanUpperThreshold
      TreatMissingData: notBreaching
      Metrics:
      - Id: ad1
        ReturnData: true
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: true
        MetricStat:
          Metric:
            Namespace: AWS/ApplicationELB
            MetricName: HTTPCode_ELB_4XX_Count
            Dimensions:
              - Name: LoadBalancer
                Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
          Period: 60
          Stat: Sum

  ELB5XXAnomalyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: >
        Based on anomaly detection, the number of HTTP 5XX server error codes that originate from the load balancer.
        This count does not include any response codes generated by the targets.
      AlarmActions: !If
        - UseAlarmActions
        - - !Ref NotificationTopicArn
        - []
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      ThresholdMetricId: ad2
      ComparisonOperator: GreaterThanUpperThreshold
      TreatMissingData: notBreaching
      Metrics:
      - Id: ad2
        ReturnData: true
        Expression: ANOMALY_DETECTION_BAND(m2, 2)
      - Id: m2
        ReturnData: true
        MetricStat:
          Metric:
            Namespace: AWS/ApplicationELB
            MetricName: HTTPCode_ELB_5XX_Count
            Dimensions:
              - Name: LoadBalancer
                Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
          Period: 60
          Stat: Sum

  #
  # Blue/Green deployment stack
  #

  ECSCanaryDeploymentStack:
    Type: AWS::CloudFormation::Stack
    Condition: UseECSCanaryDeploymentStack
    Properties:
      TemplateURL: "https://template-storage-templatebucket-1upzyw6v9cs42.s3.eu-west-2.amazonaws.com/ecs-canary-deployment/template.yaml"
      Parameters:
        VpcId: !Sub ${VpcStackName}-VpcId
        # Parameters below to be filled by developers
        # Replace with logical ID in this template
        ECSClusterName: !Ref FargateCluster
        ECSServiceName: !GetAtt ContainerService.Name
        TargetGroupName: !GetAtt ApplicationLoadBalancerTargetGroup.TargetGroupName
        LoadBalancerListenerARN: !Ref ApplicationLoadBalancerListener
        ECSServiceTaskDefinition: !Ref TaskDefinition
        DeploymentStrategy: !Ref DeploymentStrategy
        # Replace with values correspondent to your app container
        ContainerName: !Sub "${AWS::StackName}-node-server"
        ContainerPort: 8000
        PermissionsBoundary: !If
          - UsePermissionsBoundary
          - !Ref PermissionsBoundary
          - "none"
        CodeSigningConfigArn: !If
          - UseCodeSigning
          - !Ref CodeSigningConfigArn
          - "none"
        CloudWatchAlarms: !Sub
          - "${ELB5XXAlarm},${ELB4XXAnomalyAlarm}"
          - ELB5XXAlarm: !Ref ELB5XXAlarm
            ELB4XXAnomalyAlarm: !Ref ELB4XXAnomalyAlarm

  #
  # Logging
  #

  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/${AWS::StackName}"
      RetentionInDays: 30
      KmsKeyId: !GetAtt KmsKey.Arn
      Tags:
        - Key: Name
          Value: ApiGatewayAccessLogGroup
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app/template.yaml

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_18:This is the access logs bucket. It should not log itself.
      BucketName: !Join
        - "-"
        - - !Ref AWS::StackName
          - logs
          - Fn::Select:
              - 4
              - Fn::Split:
                  - '-'
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - /
                          - Ref: AWS::StackId
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-accesslogs"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLoadBalancerToLogToS3
            Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
          - Sid: AllowAwsLogDeliveryToLogToS3
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
                "aws:SourceAccount": !Ref AWS::AccountId
          - Sid: AllowAwsLogDeliveryToReadBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !GetAtt AccessLogsBucket.Arn
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Action:
              - "s3:*"
            Resource:
              - !Sub "${AccessLogsBucket.Arn}/*"
            Principal: "*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Service
          Value: ci/cd
        - Key: Name
          Value: !Sub "${AWS::StackName}-KmsKey"
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/node/template.yaml

Outputs:
  ApiGatewayEndpoint:
    Description: The base URI for this application.
    Value: !GetAtt ApiGateway.ApiEndpoint
