AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Demo application container for deployment into AWS Fargate.

Parameters:
  ContainerRepositoryUri:
    Description: The image repository URI that stores the container to deploy.
    Type: String
    AllowedPattern: "^(?!\\w+://).*"
    ConstraintDescription: must not contain a scheme

  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String

Mappings:
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

Resources:
  #
  # Fargate cluster
  #

  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-FargateCluster"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ContainerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FargateCluster
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: node-server
          ContainerPort: 8000
          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !GetAtt ContainerServiceSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdB"
      PropagateTags: SERVICE
      TaskDefinition: !Ref TaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerService"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml
    DependsOn: ApplicationLoadBalancerListener

  ContainerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to access the Container Service
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ContainerService
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      SecurityGroupIngress:
        - Description: Allow traffic from the load balancer on port 8000
          SourceSecurityGroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerServiceSecurityGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  #
  # Fargate tasks
  #

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: node-server
          Image: !Sub "${ContainerRepositoryUri}:latest"
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Essential: true
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Family: server
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskDefinition"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskExecutionRole"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  #
  # API Gateway
  #

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: node-server-endpoint
      ProtocolType: HTTP
      Tags:
        Name: !Sub "${AWS::StackName}-ApiGateway"
        Service: ci/cd
        Source: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref ApplicationLoadBalancerListener
      PayloadFormatVersion: 1.0

  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${ApiGatewayIntegration}"

  ApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      AutoDeploy: true
      AccessLogSettings:
        Format: "$context.requestId $context.httpMethod $context.path"
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
      Tags:
        Name: !Sub "${AWS::StackName}-ApiDefaultStage"
        Service: ci/cd
        Source: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  #
  # Load balancing
  #

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdB"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancer"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: 8000
      HealthCheckProtocol: HTTP
      Port: 8000
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Matcher:
        HttpCode: "200-499"
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerTargetGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled.
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Application Load Balancer
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ApplicationLoadBalancer
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerSecurityGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApplicationLoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      CidrIp: 0.0.0.0/0
      Description: Allow traffic from anyone on port 80
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  ApplicationLoadBalancerSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt ContainerServiceSecurityGroup.GroupId
      Description: Allow traffic to Container Service on port 8000
      IpProtocol: tcp
      FromPort: 8000
      ToPort: 8000

  #
  # Logging
  #

  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      KmsKeyId: !GetAtt LoggingKmsKey.Arn
      Tags:
        - Key: Name
          Value: ApiGatewayAccessLogGroup
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/sam-app/template.yaml

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_18:This is the access logs bucket. It should not log itself.
      BucketName: !Join
        - "-"
        - - !Ref AWS::StackName
          - logs
          - Fn::Select:
              - 4
              - Fn::Split:
                  - '-'
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - /
                          - Ref: AWS::StackId
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-accesslogs"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLoadBalancerToLogToS3
            Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
          - Sid: AllowAwsLogDeliveryToLogToS3
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
                "aws:SourceAccount": !Ref AWS::AccountId
          - Sid: AllowAwsLogDeliveryToReadBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !GetAtt AccessLogsBucket.Arn
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Service
          Value: ci/cd
        - Key: Name
          Value: !Sub "${AWS::StackName}-LoggingKmsKey"
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

Outputs:
  ApiGatewayEndpoint:
    Description: The base URI for this application.
    Value: !GetAtt ApiGateway.ApiEndpoint
