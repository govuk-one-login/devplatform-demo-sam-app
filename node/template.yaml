AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Demo application container for deployment into AWS Fargate.
  Managed by dev-platform

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String

  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

Conditions:
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Mappings:
  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

Resources:
  #
  # Fargate cluster
  #

  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-FargateCluster"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ContainerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FargateCluster
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: node-server
          ContainerPort: 8000
          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !GetAtt ContainerServiceSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdB"
      PropagateTags: SERVICE
      TaskDefinition: !Ref TaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerService"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml
    DependsOn: ApplicationLoadBalancerListener

  ContainerAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref FargateCluster
          - !GetAtt ContainerService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ContainerAutoScalingPolicy:
    DependsOn: ContainerAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: containerAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref FargateCluster
          - !GetAtt ContainerService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70

  ContainerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to access the Container Service
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ContainerService
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      SecurityGroupIngress:
        - Description: Allow traffic from the load balancer on port 8000
          SourceSecurityGroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerServiceSecurityGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  #
  # Fargate tasks
  #

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: node-server
          Image: "CONTAINER-IMAGE-PLACEHOLDER"
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/ecs/server"
              awslogs-region: "eu-west-2"
              awslogs-create-group: "true"
              awslogs-stream-prefix: "ecs"
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Family: server
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskDefinition"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: CreateLogGroup
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskExecutionRole"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  #
  # API Gateway
  #
  #
  RestApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-RestApiGateway"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-RestApiGateway"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApiGatewayDeployment:
    DependsOn: RestApiGatewayMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApiGateway
      StageName: !Sub "${AWS::StackName}-RestApiGatewayStage"
      StageDescription:
        CacheClusterEnabled: true
        CacheClusterSize: 0.5
        CacheDataEncrypted: true
        CacheTtlInSeconds: 300
        CachingEnabled: true

  RestApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !GetAtt RestApiGateway.RootResourceId
      RestApiId: !Ref RestApiGateway
      AuthorizationType: NONE
      ApiKeyRequired: true                    # pragma: allowlist secret
      Integration:
        Type: HTTP_PROXY
        ConnectionType: VPC_LINK
        ConnectionId:
          Fn::ImportValue:
            !Sub "${VpcStackName}-ApiGatewayVpcLinkId"
        IntegrationHttpMethod: GET
        Uri: !Sub
          - "http://${LBDNS}"
          - LBDNS:
              Fn::ImportValue:
                !Sub "${VpcStackName}-ApiGatewayVpcLinkTargetNLBDNS"

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: !Sub
        - "${AWS::StackName}-RestApiGatewayStage-${StackId}"
        - StackId: !Select [2, !Split ['/', !Ref AWS::StackId]]
      RestApiId: !Ref RestApiGateway
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
      CacheClusterEnabled: true
      CacheClusterSize: 0.5
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: /
          HttpMethod: GET
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'
          LoggingLevel: INFO

  ApiGateWayApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RestApiGateway
          StageName: !Ref ApiGatewayStage
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-RestApiGateway-ApiKey"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApiKeyUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref RestApiGateway
          Stage: !Ref ApiGatewayStage
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 20
        RateLimit: 10
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-RestApiKey-UsagePlan"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApiKeyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiGateWayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiKeyUsagePlan

  #
  # Rest api gateway vpc link
  #

  NetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup
      LoadBalancerArn:
        Fn::ImportValue:
          !Sub "${VpcStackName}-ApiGatewayVpcLinkTargetNLB"
      Port: 80
      Protocol: TCP

  NetworkLoadBalancerTargetGroup:
    DependsOn: ApplicationLoadBalancerListener
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-NLBTarGrp"
      Port: 80
      Protocol: TCP
      Targets:
        - Id: !Ref ApplicationLoadBalancer
      TargetType: alb
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NLBTarGrp"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  # Application Load balancing
  #

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdB"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancer"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: 8000
      HealthCheckProtocol: HTTP
      HealthCheckPath: /test
      Port: 8000
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Matcher:
        HttpCode: "200-499"
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerTargetGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled.
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Application Load Balancer
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ApplicationLoadBalancer
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerSecurityGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApplicationLoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      CidrIp:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcCidr"
      Description: Allow traffic from the VPC on port 80
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  ApplicationLoadBalancerSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt ContainerServiceSecurityGroup.GroupId
      Description: Allow traffic to Container Service on port 8000
      IpProtocol: tcp
      FromPort: 8000
      ToPort: 8000

  #
  #  ElastiCache
  #

  ApplicationCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Sub "${AWS::StackName}-application-cache-subnet-group"
      Description: Cache Subnet Group
      SubnetIds:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdB"
      Tags:
        - Key: Name
          Value: ApplicationCacheSubnetGroup
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApplicationParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      CacheParameterGroupFamily: redis7
      Description: Hello! This is a nice description
      Properties:
        cluster-enabled: "yes"
      Tags:
        - Key: Name
          Value: ApplicationElastiCacheCluster
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApplicationElastiCacheLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt KmsKey.Arn
      LogGroupName: !Sub "/aws/vendedlogs/${AWS::StackName}-elasticache-replication-group-logs"
      RetentionInDays: 1
      Tags:
        - Key: Name
          Value: ApplicationElastiCacheCluster
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApplicationAuthPass:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-elasticache-application"
      Description: Random password for elastiCache
      GenerateSecretString:
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: true
        ExcludeUppercase: false
        IncludeSpace: false
        PasswordLength: 17
      KmsKeyId: !GetAtt KmsKey.Arn
      Tags:
        - Key: Name
          Value: ApplicationAuthPass
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  ApplicationReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      TransitEncryptionEnabled: true
      AtRestEncryptionEnabled: true
      AuthToken: !Sub '{{resolve:secretsmanager:${ApplicationAuthPass}}}'
      AutomaticFailoverEnabled: true
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: !Ref ApplicationCacheSubnetGroup
      CacheParameterGroupName: !Ref ApplicationParameterGroup
      Engine: redis
      LogDeliveryConfigurations:
        - DestinationDetails:
            CloudWatchLogsDetails:
              LogGroup: !Ref ApplicationElastiCacheLogGroup
          DestinationType: cloudwatch-logs
          LogFormat: json
          LogType: engine-log
      MultiAZEnabled: true
      NumNodeGroups: 1
      ReplicasPerNodeGroup: 1
      ReplicationGroupDescription: Replication group for elasticache
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
      Tags:
        - Key: Name
          Value: ApplicationElastiCacheCluster
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml


  #
  # Logging
  #

  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/${AWS::StackName}"
      RetentionInDays: 7
      KmsKeyId: !GetAtt KmsKey.Arn
      Tags:
        - Key: Name
          Value: ApiGatewayAccessLogGroup
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_18:This is the access logs bucket. It should not log itself.
      BucketName: !Join
        - "-"
        - - !Ref AWS::StackName
          - logs
          - Fn::Select:
              - 4
              - Fn::Split:
                  - '-'
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - /
                          - Ref: AWS::StackId
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-accesslogs"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLoadBalancerToLogToS3
            Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
          - Sid: AllowAwsLogDeliveryToLogToS3
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
                "aws:SourceAccount": !Ref AWS::AccountId
          - Sid: AllowAwsLogDeliveryToReadBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !GetAtt AccessLogsBucket.Arn
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Action:
              - "s3:*"
            Resource:
              - !Sub "${AccessLogsBucket.Arn}/*"
            Principal: "*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Service
          Value: ci/cd
        - Key: Name
          Value: !Sub "${AWS::StackName}-KmsKey"
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  WAFv2ACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Block: {}
      Scope: REGIONAL
      Rules:
        # Optional rule set to restrict to GDS IP addresses.
        # See WAFv2GDSIPSet resource further on.
        - Name: GDSIPs
          Action:
            Allow: {}
          Priority: 10
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt WAFv2GDSIPSet.Arn
          VisibilityConfig:
            CloudWatchMetricsEnabled: TRUE
            MetricName: !Sub "${AWS::StackName}-WAFGDSIP-hits"
            SampledRequestsEnabled: FALSE
        - Name: AWS-AWMManagedRuleCommonRuleSet
          OverrideAction:
            None: {}
          Priority: 20
          Statement:
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesCommonRuleSet
              VendorName: AWS
          VisibilityConfig:
            CloudWatchMetricsEnabled: TRUE
            MetricName: !Sub "${AWS::StackName}-AWSCRS-hits"
            SampledRequestsEnabled: FALSE
        - Name: AWS-AWSManagedRulesKnownBadInputsRuleSet
          Priority: 30
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            CloudWatchMetricsEnabled: TRUE
            MetricName: !Sub "${AWS::StackName}-AWSKBI-hits"
            SampledRequestsEnabled: FALSE
      VisibilityConfig:
        CloudWatchMetricsEnabled: TRUE
        MetricName: !Sub "${AWS::StackName}-WAFv2-hits"
        SampledRequestsEnabled: FALSE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WAFv2"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

# The IP address blocks below are referenced from here:
# https://sites.google.com/a/digital.cabinet-office.gov.uk/gds/working-at-gds/gds-internal-it/gds-internal-it-network-public-ip-addresses
  WAFv2GDSIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Addresses:
        - "213.86.153.211/32"
        - "213.86.153.212/32"
        - "213.86.153.213/32"
        - "213.86.153.214/32"
        - "213.86.153.231/32"
        - "213.86.153.235/32"
        - "213.86.153.236/32"
        - "213.86.153.237/32"
        - "85.133.67.244/32"
        - "51.149.8.0/25"
        - "51.149.8.128/29"
      IPAddressVersion: IPV4
      Scope: REGIONAL
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WAFv2GDSIPSet"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/node/template.yaml

  WAFv2ACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Sub
        - "arn:aws:apigateway:${AWS::Region}::/restapis/${RestApiGateway}/stages/${ApiStage}"
        - ApiStage: !Ref ApiGatewayStage #This is the hack to allow the API Gateway stage to be created before the association occurs.
      WebACLArn: !GetAtt WAFv2ACL.Arn

Outputs:
  ApiGatewayEndpoint:
    Description: The base URI for this application.
    Value: !Sub
      - "https://${restapi_id}.execute-api.${AWS::Region}.amazonaws.com/${stage_name}/"
      - restapi_id: !Ref RestApiGateway
        stage_name: !Ref ApiGatewayStage
