AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  ECS fargate example deployment template using blue green.
  Replace PLACEHOLDER_VPC_STACK_NAME with the VPC stack name.
  Replace PLACEHOLDER_STACK_NAME with the stack name for this stack.
  Replace CONTAINER-IMAGE-PLACEHOLDER with the ECR image arn.
  Managed by dev-platform

Transform:
  - AWS::Serverless-2016-10-31
  - AWS::CodeDeployBlueGreen

Metadata:
  cfn-lint:
    config:
      regions:
        - eu-west-2
      ignore_checks:
        - W2001 #Present currently because VpcId is deprecated in favour of using !ImportValue from the VpcStackName

Hooks:
  CodeDeployBlueGreenHook:
    Properties:
      LifecycleEventHooks:
        # Dynamic values not supported in Hooks
        BeforeAllowTraffic: "BeforeAllowTrafficLambda-PLACEHOLDER_STACK_NAME" # pragma: allowlist secret
      ServiceRole: "HooksServiceRole-PLACEHOLDER_STACK_NAME"
      TrafficRoutingConfig:
        Type: TimeBasedLinear
        TimeBasedLinear:
          StepPercentage: 15
          BakeTimeMins: 5
      Applications:
        - Target:
            Type: 'AWS::ECS::Service'
            LogicalID: ContainerService
          ECSAttributes:
            TaskDefinitions:
              - BlueTaskDefinition
              - GreenTaskDefinition
            TaskSets:
              - BlueTaskSet
              - GreenTaskSet
            TrafficRouting:
              ProdTrafficRoute:
                Type: 'AWS::ElasticLoadBalancingV2::Listener'
                LogicalID: ApplicationLoadBalancerListener
              TargetGroups:
                - ApplicationLoadBalancerTargetGroupBlue
                - ApplicationLoadBalancerTargetGroupGreen
    Type: 'AWS::CodeDeploy::BlueGreen'

Parameters:
  VpcStackName:
    Description: "The name of the VPC to deploy to"
    Type: "String"
    Default: "none"

  PrivateSubnetA:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Private Subnet A Id
    Default: "/PLACEHOLDER_VPC_STACK_NAME/PrivateSubnetA"     # pragma: allowlist secret

  PrivateSubnetB:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Private Subnet B Id
    Default: "/PLACEHOLDER_VPC_STACK_NAME/PrivateSubnetB"     # pragma: allowlist secret

  VpcId: # Deprecated in favour of !ImportValue
    Type: AWS::SSM::Parameter::Value<String>
    Description: Vpc Id
    Default: "/PLACEHOLDER_VPC_STACK_NAME/VpcId"

  VpcLinkId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Vpc Link Id
    Default: "/PLACEHOLDER_VPC_STACK_NAME/VpcLinkId"

  VpcCidr:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Vpc Cidr
    Default: "/PLACEHOLDER_VPC_STACK_NAME/VpcCidr"

  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

Conditions:
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Mappings:
  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

Resources:
  #
  # Fargate cluster
  #
  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-FargateCluster"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml

  ContainerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FargateCluster
      DeploymentController:
        Type: EXTERNAL
      PropagateTags: SERVICE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerService"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml
    DependsOn: ApplicationLoadBalancerListener

  ContainerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to access the Container Service
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ContainerService
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      SecurityGroupIngress:
        - Description: Allow traffic from the load balancer on port 5000
          SourceSecurityGroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerServiceSecurityGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml

  #
  # Fargate tasks
  #

  BlueTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: server
          Image: "CONTAINER-IMAGE-PLACEHOLDER"
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${AWS::StackName}/server"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Family: server
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskDefinition"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}/server"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskExecutionRole"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml

  #
  # API Gateway
  #

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: server-endpoint
      ProtocolType: HTTP
      Tags:
        Name: !Sub "${AWS::StackName}-ApiGateway"
        Service: ci/cd
        Source: govuk-one-login/devplatform-deploy/sam-deploy-pipeline/tests/fargate-app/template.yaml

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      ConnectionId: !Ref VpcLinkId
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref ApplicationLoadBalancerListener
      PayloadFormatVersion: 1.0

  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${ApiGatewayIntegration}"

  ApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      AutoDeploy: true
      AccessLogSettings:
        Format: "$context.requestId $context.httpMethod $context.path"
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
      Tags:
        Name: !Sub "${AWS::StackName}-ApiDefaultStage"
        Service: ci/cd
        Source: govuk-one-login/devplatform-deploy/sam-deploy-pipeline/tests/fargate-app/template.yaml

  #
  # Load balancing
  #

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancer"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml

  ApplicationLoadBalancerTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: 5000
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Port: 5000
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Matcher:
        HttpCode: "200-499"
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: "5"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerTargetGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml

  ApplicationLoadBalancerTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: 5000
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Port: 5000
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Matcher:
        HttpCode: "200-499"
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: "5"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerTargetGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled.
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroupBlue
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancerListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroupBlue
                Weight: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 1

  BlueTaskSet:
    Type: 'AWS::ECS::TaskSet'
    Properties:
      Cluster: !Ref FargateCluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ContainerServiceSecurityGroup.GroupId
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
      PlatformVersion: 1.4.0
      Scale:
        Unit: PERCENT
        Value: 100
      Service: !Ref ContainerService
      TaskDefinition: !Ref BlueTaskDefinition
      LoadBalancers:
        - ContainerName: server
          ContainerPort: 5000
          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroupBlue
  PrimaryTaskSet:
    Type: 'AWS::ECS::PrimaryTaskSet'
    Properties:
      Cluster: !Ref FargateCluster
      Service: !Ref ContainerService
      TaskSetId: !GetAtt
        - BlueTaskSet
        - Id

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Application Load Balancer
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ApplicationLoadBalancer
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId

      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerSecurityGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml

  ApplicationLoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      # checkov:skip=CKV_AWS_260: PLAT-477 Raised to resolve
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      CidrIp: !Ref VpcCidr
      Description: Allow traffic from anyone on port 80
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  ApplicationLoadBalancerSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt ContainerServiceSecurityGroup.GroupId
      Description: Allow traffic to Container Service on port 5000
      IpProtocol: tcp
      FromPort: 5000
      ToPort: 5000


  #
  # Logging
  #

  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/${AWS::StackName}"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn
      Tags:
        - Key: Name
          Value: ApiGatewayAccessLogGroup
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app/template.yaml

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_18:This is the access logs bucket. It should not log itself.
      BucketName: !Join
        - "-"
        - - !Ref AWS::StackName
          - logs
          - Fn::Select:
              - 4
              - Fn::Split:
                  - '-'
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - /
                          - Ref: AWS::StackId
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-accesslogs"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLoadBalancerToLogToS3
            Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              Bool:
                "aws:SecureTransport": true
          - Sid: AllowAwsLogDeliveryToLogToS3
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
                "aws:SourceAccount": !Ref AWS::AccountId
              Bool:
                "aws:SecureTransport": true
          - Sid: AllowAwsLogDeliveryToReadBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !GetAtt AccessLogsBucket.Arn
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              Bool:
                "aws:SecureTransport": true

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Service
          Value: ci/cd
        - Key: Name
          Value: !Sub "${AWS::StackName}-LoggingKmsKey"
        - Key: Source
          Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml

  HooksServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub "HooksServiceRole-PLACEHOLDER_STACK_NAME"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: codedeploy.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: lambdaAccessPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 'lambda:*'
                  Resource: !GetAtt  BeforeAllowTrafficLambda.Arn
        PermissionsBoundary: !If
          - UsePermissionsBoundary
          - !Ref PermissionsBoundary
          - !Ref AWS::NoValue
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-ServiceRole"
          - Key: Service
            Value: ci/cd
          - Key: Source
            Value: govuk-one-login/devplatform-demo-sam-app/sam-app3/template.yaml


  BeforeAllowTrafficLambda:
        Type: AWS::Serverless::Function
        # checkov:skip=CKV_AWS_116: DLQ is not appropriate for a Lambda invoked by an API
        # checkov:skip=CKV_AWS_117: Internet access not required
        Metadata:
          checkov:
            skip:
             - id: "CKV_AWS_116"
               comment: "DLQ is not appropriate for a Lambda invoked by an API"
             - id: "CKV_AWS_117"
               comment: "Internet access not required"
        Properties:
          FunctionName: "BeforeAllowTrafficLambda-PLACEHOLDER_STACK_NAME"  # pragma: allowlist secret
          Runtime: nodejs18.x
          Policies:
            - AWSLambdaBasicExecutionRole
            - Statement:
                - Sid: CodeDeployPolicy
                  Effect: Allow
                  Action:
                    - codedeploy:*
                  Resource:
                    "*"
          Handler: index.handler
          ReservedConcurrentExecutions: 5
          InlineCode: |
            'use strict';
             const aws = require('aws-sdk');
             const codedeploy = new aws.CodeDeploy({apiVersion: '2014-10-06'});

            exports.handler = (event, context, callback) => {
                  console.log("Entering BeforeAllowTraffic Hook!")
                  //Read the DeploymentId from the event payload.
                  var deploymentId = event.DeploymentId;

                  //Read the LifecycleEventHookExecutionId from the event payload
                  var lifecycleEventHookExecutionId = event.LifecycleEventHookExecutionId;

                  /*
                  Enter validation tests here.
                  */

                  // Prepare the validation test results with the deploymentId and
                  // the lifecycleEventHookExecutionId for CodeDeploy.
                  var params = {
                          deploymentId: deploymentId,
                          lifecycleEventHookExecutionId: lifecycleEventHookExecutionId,
                          status: 'Succeeded' // status can be 'Succeeded' or 'Failed'
                    };

                  console.log("PARAMS "+ JSON.stringify(params))

                  // Pass CodeDeploy the prepared validation test results.
                  codedeploy.putLifecycleEventHookExecutionStatus(params, function(err, data) {
                      if (err) {
                          console.log(JSON.stringify(err))
                          // Validation failed.
                          callback('Validation test failed');
                      } else {
                        // Validation succeeded.
                        callback(null, 'Validation test succeeded');
                      }
                  });
            };

Outputs:
  ApiGatewayEndpoint:
    Description: The base URI for this application.
    Value: !GetAtt ApiGateway.ApiEndpoint

